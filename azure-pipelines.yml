trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  sonarCloudEndpointName: 'sonarcloud_service_connection'
  sonarCloudProjectName: 'Test Project'

resources:
  repositories:
    - repository: self
    - repository: sonarqube-issue-fixer
      type: git
      name: "SonarQube Issue Fixer/SonarQube Issue Fixer"

jobs:
- job: RunSonarCloudAndWeaviate
  pool:
    vmImage: 'ubuntu-latest'
  container:
    image: docker:stable-dind
    options: --privileged
  steps:
  - task: DockerCompose@0
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/docker-compose.azure.yml'
      action: 'Run services'
      detached: true
    displayName: 'Start Weaviate services'

  - script: |
      # Wait for Weaviate to be ready
      timeout=300
      while [[ $timeout -gt 0 ]]; do
        if curl -s http://localhost:8080/v1/.well-known/ready | grep -q "OK"; then
          echo "Weaviate is ready"
          break
        fi
        sleep 5
        ((timeout-=5))
      done
      if [[ $timeout -le 0 ]]; then
        echo "Timed out waiting for Weaviate"
        exit 1
      fi
    displayName: 'Wait for Weaviate to be ready'

  - task: SonarCloudPrepare@2
    inputs:
      SonarCloud: '$(sonarCloudEndpointName)'
      organization: '$(SONAR_ORGANISATION)'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: '$(SONAR_PROJECT_KEY)'
      cliProjectName: '$(sonarCloudProjectName)'
      cliProjectVersion: '1.0'
      cliSources: '.'

  - task: SonarCloudAnalyze@2

  - task: SonarCloudPublish@2
    inputs:
      pollingTimeoutSec: '300'

  - checkout: sonarqube-issue-fixer

  - script: |
      python '$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/scripts/fetch_sonarcloud_issues.py' $(SONAR_ORGANISATION) $(SONAR_PROJECT_KEY) $(SONAR_TOKEN)
    displayName: 'Retrieve SonarCloud Issues'
    workingDirectory: $(System.DefaultWorkingDirectory)

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/issues.json'
      artifactName: 'SonarCloudIssues'
      publishLocation: 'pipeline'

  - script: |
      # Run your Weaviate API
      python '$(Build.SourcesDirectory)/SonarQube Issue Fixer/api/main.py'
    displayName: 'Run Weaviate API'
    env:
      WEAVIATE_URL: 'http://localhost:8080'