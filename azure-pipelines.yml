trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: sonarCloudEndpointName 
  value: 'sonarcloud_service_connection'
- name: sonarCloudProjectName 
  value: 'Test Project'
- group: Code_Fix_Agent_dotenv

resources:
  repositories:
    - repository: self
    - repository: sonarqube-issue-fixer
      type: git
      name: "SonarQube Issue Fixer/SonarQube Issue Fixer"

steps:

- checkout: self

# - task: SonarCloudPrepare@2
#   inputs:
#     SonarCloud: '$(sonarCloudEndpointName)'
#     organization: '$(SONAR_ORGANISATION)'
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: '$(SONAR_PROJECT_KEY)'
#     cliProjectName: '$(sonarCloudProjectName)'
#     cliProjectVersion: '1.0'
#     cliSources: '.'  # Update this to the correct source directory

# - task: SonarCloudAnalyze@2

# # Uncomment the next task to wait until SonarCloud processing has finished and to publish the result on the Pipeline build summary
# - task: SonarCloudPublish@2
#   inputs:
#     pollingTimeoutSec: '300'

# # Publish issues as an artifact
# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: '$(System.DefaultWorkingDirectory)/issues.json'
#     artifactName: 'SonarCloudIssues'
#     publishLocation: 'pipeline'

- checkout: sonarqube-issue-fixer

# Use a specific Python version
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'  # Specify the required Python version here
    addToPath: true

# Install Python dependencies
- script: |
    python -m pip install --upgrade pip
    pip install -r '$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/scripts/requirements.txt'
  displayName: 'Install Python Dependencies'
  workingDirectory: $(System.DefaultWorkingDirectory)

# Run Python script to retrieve SonarCloud issues
- script: |
    python '$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/scripts/fetch_sonarcloud_issues.py' $(SONAR_ORGANISATION) $(SONAR_PROJECT_KEY) $(SONAR_TOKEN)
  displayName: 'Retrieve SonarCloud Issues'
  workingDirectory: $(System.DefaultWorkingDirectory)

# Run agent.py script using issues.json as input
- script: |
    python '$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/scripts/agent.py' '$(System.DefaultWorkingDirectory)/issues.json'
  displayName: 'Run Agent Script'
  env:
    CURRENT_BRANCH: $(CURRENT_BRANCH)
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)
    OPENAI_API_KEY: $(OPENAI_API_KEY)
    OPENAI_MODEL: $(OPENAI_MODEL)
    REPO_URL: $(REPO_URL)
  workingDirectory: $(System.DefaultWorkingDirectory)

- script: |
    # Run your Weaviate API
    python '$(Build.SourcesDirectory)/SonarQube Issue Fixer/api/main.py'
  displayName: 'Run Weaviate API'
  env:
    WEAVIATE_URL: 'http://localhost:8080'