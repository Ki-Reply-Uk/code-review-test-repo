trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: SonarQubeSecrets  # This will include SONARQUBE_TOKEN and other secrets
  SONARQUBE_URL: 'http://localhost:9000'
  SONARQUBE_PROJECT_KEY: 'My-Project'  # Replace with your actual SonarQube project key

steps:
- checkout: self  # This checks out the GitHub repository where the azure-pipelines.yml file resides

- script: |
    docker-compose -f $(Build.SourcesDirectory)/sonarqube-project/docker-compose.yml up -d
  displayName: 'Start SonarQube and PostgreSQL'

- script: |
    echo "sonar.host.url=$(SONARQUBE_URL)" > $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner/sonar-scanner.properties
    echo "sonar.login=$(SONARQUBE_TOKEN)" >> $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner/sonar-scanner.properties
    echo "sonar.projectKey=$(SONARQUBE_PROJECT_KEY)" >> $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner/sonar-scanner.properties
    echo "sonar.sources=." >> $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner/sonar-scanner.properties
    echo "sonar.projectName=MyProject" >> $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner/sonar-scanner.properties
  displayName: 'Configure SonarScanner Properties'

- script: |
    docker build -t my-sonar-scanner $(Build.SourcesDirectory)/sonarqube-project/sonar-scanner
    docker run --network sonarnet --rm -v $(Build.SourcesDirectory):/usr/src my-sonar-scanner
  displayName: 'Run SonarScanner'

- script: |
    docker-compose -f $(Build.SourcesDirectory)/sonarqube-project/docker-compose.yml down
  displayName: 'Stop SonarQube and PostgreSQL'
