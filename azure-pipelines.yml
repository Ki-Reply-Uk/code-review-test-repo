trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONARQUBE_URL: 'http://localhost:9000'
  SONARQUBE_PROJECT_KEY: 'My-Project'
  # Ensure SONARQUBE_TOKEN is defined as a secret variable in Azure DevOps pipeline settings

resources:
  repositories:
    - repository: self
    - repository: sonarqube-issue-fixer
      type: git
      name: "SonarQube Issue Fixer/SonarQube Issue Fixer"

steps:
- checkout: self
- checkout: sonarqube-issue-fixer

- script: |
    docker-compose -f "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/docker-compose.yml" up -d
  displayName: 'Start SonarQube and PostgreSQL'

- script: |
    echo "Giving SonarQube time to initialize..."
    sleep 60
  displayName: 'Wait for SonarQube to initialize'

- script: |
    echo "Waiting for SonarQube to be available..."
    for i in {1..24}; do
      health_response=$(curl -s -f "$(SONARQUBE_URL)/api/system/health")
      health=$(echo "$health_response" | grep -o '"status":"[^"]*"' | grep -o '[^"]*$')
      echo "Health response: $health_response"
      echo "Parsed health status: $health"
      if [ "$health" = "GREEN" ]; then
        echo "SonarQube is up and running"
        break
      fi
      echo "SonarQube is unavailable or not fully initialized - waiting"
      docker logs sonarqube | tail -n 20
      sleep 10
    done
  displayName: 'Wait for SonarQube to be available'

- script: |
    echo "Configuring SonarScanner properties..."
    echo "sonar.host.url=$(SONARQUBE_URL)" > "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
    echo "sonar.login=$SONARQUBE_TOKEN" >> "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
    echo "sonar.projectKey=$(SONARQUBE_PROJECT_KEY)" >> "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
    echo "sonar.sources=." >> "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
    echo "sonar.projectName=MyProject" >> "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
    echo "SonarScanner properties configured successfully:"
    cat "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner/sonar-scanner.properties"
  displayName: 'Configure SonarScanner Properties'

- script: |
    docker build -t my-sonar-scanner "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/sonar-scanner"
    docker run --network sonarqube-project_sonarnet --rm -v "$(Build.SourcesDirectory):/usr/src" my-sonar-scanner -X
  displayName: 'Run SonarScanner'

- script: |
    docker-compose -f "$(Build.SourcesDirectory)/SonarQube Issue Fixer/sonarqube-project/docker-compose.yml" down
  displayName: 'Stop SonarQube and PostgreSQL'
