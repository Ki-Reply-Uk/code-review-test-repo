trigger:
  branches:
    include:
      - main
      
pr:
  branches:
    exclude:
      - '*'

pool:
  vmImage: 'ubuntu-latest'
variables:
- name: sonarCloudEndpointName 
  value: 'sonarcloud_service_connection'
- name: sonarCloudProjectName 
  value: 'Demo Project'
- group: Code_Fix_Agent_dotenv
- name: PYTHON_VERSION
  value: '3.10'
- name: REQUIREMENTS_PATH
  value: 'sonarqube-project/backend/services/sonar_qube_fixer_agent/requirements.txt'

resources:
  repositories:
    - repository: self
    - repository: sonarqube-issue-fixer
      type: git
      name: "SonarQube Issue Fixer/SonarQube Issue Fixer"

steps:
- checkout: self
- checkout: sonarqube-issue-fixer

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    addToPath: true

# Verify the requirements file exists
- script: |
    if [ -f "$(Build.SourcesDirectory)/$(REQUIREMENTS_PATH)" ]; then
      echo "Requirements file found at $(Build.SourcesDirectory)/$(REQUIREMENTS_PATH)"
    else
      echo "Requirements file not found at $(Build.SourcesDirectory)/$(REQUIREMENTS_PATH)"
      echo "Directory contents:"
      ls -R $(Build.SourcesDirectory)
      exit 1
    fi
  displayName: 'Verify Requirements File'

- task: Cache@2
  inputs:
    key: 'python | "$(Agent.OS)" | "$(PYTHON_VERSION)" | $(Build.SourcesDirectory)/$(REQUIREMENTS_PATH)'
    restoreKeys: |
      python | "$(Agent.OS)" | "$(PYTHON_VERSION)"
      python | "$(Agent.OS)"
      python
    path: $(Pipeline.Workspace)/venv

- script: |
    python -m venv $(Pipeline.Workspace)/venv
    source $(Pipeline.Workspace)/venv/bin/activate
    python -m pip install --upgrade pip
    pip install -r "$(Build.SourcesDirectory)/$(REQUIREMENTS_PATH)"
  displayName: 'Setup Python venv'
  condition: ne(variables['CacheRestored'], 'true')

- script: |
    source $(Pipeline.Workspace)/venv/bin/activate
    echo "Python version:"
    python --version
    echo "Pip version:"
    pip --version
    echo "Installed packages:"
    pip list
  displayName: 'Verify Python Environment'

# Run Python script to retrieve SonarCloud issues
- script: |
    source $(Pipeline.Workspace)/venv/bin/activate
    python '$(Build.SourcesDirectory)/sonarqube-project/sonar_issues/fetch_sonarcloud_issues.py' $(SONAR_ORGANISATION) $(SONAR_PROJECT_KEY) $(SONAR_TOKEN)
  displayName: 'Retrieve SonarCloud Issues'
  workingDirectory: '$(Build.SourcesDirectory)/sonarqube-project'

# Publish issues as an artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.SourcesDirectory)/sonarqube-project/issues.json'
    artifactName: 'SonarCloudIssues'
    publishLocation: 'pipeline'

# Run fixer_agent.py script using issues.json as input
- script: |
    source $(Pipeline.Workspace)/venv/bin/activate
    python backend/services/sonar_qube_fixer_agent/src/fixer_agent.py 'issues.json'
  displayName: 'Run Fixer Agent Script'
  workingDirectory: '$(Build.SourcesDirectory)/sonarqube-project'
  env:
    CURRENT_BRANCH: $(CURRENT_BRANCH)
    GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)
    OPENAI_API_KEY: $(OPENAI_API_KEY)
    OPENAI_MODEL: $(OPENAI_MODEL)
    REPO_URL: $(REPO_URL)